###
# This file is generated.
#
# To edit, makes changes to the file in templates/ulp.py.j2 and run support/ulp_builder.py.
###

import espulp
import memorymap

from pins import ULP_ADC_PINS, ULP_GPIO_PINS


class ULPRunMode(object):
    NORMAL = 0
    PAUSED = 1
    CALIBRATION = 2


class ULP:
    def __init__(self):
        self.__program = espulp.ULP(espulp.Architecture.RISCV)
        self.alarm = espulp.ULPAlarm(self.__program)
        self.shared_memory = __SharedMemory__()

    def start(self):
        self.__program.run({{code}}, pins=ULP_GPIO_PINS, adc_pins=ULP_ADC_PINS)

    def resume(self):
        self.set_run_mode(ULPRunMode.NORMAL)

    def get_run_mode(self):
        return self.shared_memory.run_mode

    def set_run_mode(self, mode):
        self.shared_memory.run_mode = mode


class __SharedMemory__:
    def __init__(self):
        self.__memory_map = memorymap.AddressRange(start=0x50000000, length=0x2000)

    @property
    def awake(self):
        return self.__memory_map[{{symbols.awake}}] == 1

    @property
    def debug(self):
        return self.__memory_map[{{symbols.debug}}] == 1

    @property
    def run_mode(self):
        return self.__memory_map[{{symbols.run_mode}}]

    @run_mode.setter
    def run_mode(self, value):
        self.__memory_map[{{symbols.run_mode}}] = value

    {% for symbol, locations in symbols.sensors.items() %}
    @property
    def {{ symbol }}(self):
        return self.__read_value({{ locations }})
    {% endfor %}

    def __read_value(self, memory_addresses):
        output = 0
        for i, byte_memory_address in enumerate(memory_addresses):
            byte = self.__memory_map[byte_memory_address]
            output |= byte << (i * 8)
        return output
